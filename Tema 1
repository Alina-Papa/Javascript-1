<html>
<head>
</head>
<script>

	//Exercitiul 1. :O functie care compara 2 valori si returneaza true daca sunt egale si false daca nu sunt egale

	function compara(a, b) {
		if (a === b) {
			return true;
		} else {
			return false;
		}
	}
	
	// Exercitiul 2. : O functie care compara 2 valori si returneaza -1 daca primul e mai mic ca al doilea, 0 daca sunt egale si 1 daca primul e mai mare ca al doilea

	function comparatie(a,b) {
		if (a < b) {
			return -1;
		} else if(a === b) {
			return 0;
		} else {
			return 1;
		}
	}
	
	// Exercitiul 3. : O functie care primeste 2 valori si returneaza maximul dintre cele 2

	function max(a,b) {
		if(a >b) {
			return a;
		} else {
			return b;
		}
	}

	// Exerciul 4. : O functie care primeste 2 valori si returneaza minimul dintre cele 2

	function min(a,b) {
		if(a >b) {
			return b;
		} else {
			return a;
		}

	}

	// Exerciul 5. : O functie care intoarce suma primelor N numere naturale pozitive
	function sumaNnumere(x) {
		var suma = 0;
		for (var i=0; i<=x; i++) {
			suma += i;
		} return suma;
	}
	
	// Exerciul 6. :O functie care verifica daca N este numar prim (restul impartirii la 1 si la N ==0) 

	function prim(n){
		for(var i=2;i<n;i++){
			if(n%i===0){
				return false;
			}
		}
		return true;
	}

	// Exerciul 7. : O functie care intoarce suma primelor N numere prime
	function sumaPrime(n){
        var sum = 0;
		for(var i=2;i<n;i++){
			if(prim(i)=== true){
				sum+=i;
			}
		}
		return sum;
	}
	// Exerciul 8. : O functie care primeste un parametru de tip string si intoarce inversul acestuia (abc => cba)
	
	function invers(str) {
		var nou="";	
		for( var i=str.length-1;i>=0;i--) {
			nou+=i;
		
		} return nou;
	}



	// Exerciul 9. : O functie care intoarce produsul primelor N numere impare pozitive
	function prodImpPoz(x) {
		var sum = 0;
		for( var i= 0;i<= x; i++) {
			if(i%2 ===0) {
				sum = sum;
			} else {
				sum +=i;
			}
		} return sum;
	}

	// Exerciul 10. : O functie care primeste 2 parametri(arr - array de nr intregi si x - numar) si verifica daca x exista in array

	function existaInArray(arr,x) {
		for (var i=0; i<arr.length; i++) {
			if(arr[i] === x) {
				return true;			
			} 			
		} return false;
	}

	
	// Exerciul 11. : O functie care intoarce maximul dintr-un array primit ca parametru

    function maxar(arr) {
		var max= 0;
        for (var i=0; i<=arr.length;i++) {
			if (max < arr[i]) {
				max= arr[i];
			}

		} return max;
    }
	// Exerciul 12. : O functie care intoarce suma dintre max si min, dintr-un array primit ca parametru

	function sumaMinMax(arr) {
		var min = arr[1];
		var max = 0;
		
		for (var i =0; i<=arr.length;i++) {
			if (max < arr[i]) {
				max= arr[i];
			}
		}

        for (var j=0;j<=arr.length; j++) {
            if(min>=arr[j]) {
                min = arr[j];
            }
        }
		
		return max+min;
	}
    // Exerciul 13. : O functie care verifica daca exista duplicate intr-un array primit ca parametru
    function duplicate (arr) {
        
    }

    // Exerciul 14. : O functie care intoarce produsul numerelor pozitive intr-un array primit ca parametru
    function numPoz(arr) {
        var prod = 1;
        for( var i =0; i<=arr.length; i++) {
            if (arr[i]>0) {
                prod = prod * arr[i];
            }
        } return prod;
    }
	// Exerciul 15. : O functie care verifica daca un string primit ca parametru este palindrom (inversul == originalul, ex: abcba == abcba, abca != acba
    function palindrom (str) {
		var newStr="";
		for( var i=str.length-1; i>=0;i--) {
			newStr+=i;
			if (str === newStr) {
				return true;
			} else {
				return false; }
		}
        
    }


</script>
<body>
</body>
</htm>
